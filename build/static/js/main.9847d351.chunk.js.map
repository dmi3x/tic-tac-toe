{"version":3,"sources":["components/Footer.js","actions/header.js","components/Header.js","components/Board/Cell.js","config/index.js","components/Board/index.js","components/StartDialog/SinglePlayerDialog.js","components/StartDialog/ModeDialog.js","actions/start.js","components/StartDialog/index.js","components/Center.js","App.js","serviceWorker.js","redusers/index.js","index.js"],"names":["styles","makeStyles","theme","footer","padding","spacing","marginTop","textAlign","backgroundColor","palette","type","grey","Footer","className","Container","maxWidth","Typography","variant","color","Link","target","rel","href","Date","getFullYear","replay","restart","icon","marginRight","title","flexGrow","button","marginLeft","paddingRight","connect","state","boardIsEmpty","gameStatus","startGame","actions","props","classes","AppBar","position","Toolbar","noWrap","Fab","key","size","onClick","cell","width","height","fontWeight","lineHeight","fontSize","borderRadius","borderColor","onlyUpdateForKeys","mode","value","index","disabled","GridListTile","Button","X","O","e","preventDefault","onMakeMove","allLines","range","start","end","step","i","map","aiTurn","AiTurn","lines","matrix","currentPlayer","ranks","p1","p2","rankMatrix","line","emptyCells","values","push","length","rank","sort","join","Object","entries","a","b","calcBestTurn","nextPlayer","Board","getValue","shouldComponentUpdate","nextProps","gameMode","playerSymbol","gameOver","getGameInfo","gameOverInfo","turnInfo","winner","gameOverColor","getCellMode","isGameOver","wonLine","includes","this","component","align","player","cardGrid","Grid","container","direction","alignItems","justify","GridList","cellHeight","cols","grid","Array","keys","Component","StyledBoard","withStyles","paddingTop","paddingBottom","background","paper","selectedMode","selectedPlayer","SinglePlayerDialog","selectPlayer","gutterBottom","item","margin","extendedIcon","ModeDialog","selectMode","isGameStarted","StartDialog","root","display","flexDirection","minHeight","App","CssBaseline","Boolean","window","location","hostname","match","initialState","checkWin","prevValue","currentValue","combineReducers","action","store","createStore","reducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9847d351.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst styles = makeStyles(theme => ({\r\n    footer: {\r\n        padding: theme.spacing(3, 2),\r\n        marginTop: 'auto',\r\n        textAlign: 'center',\r\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[800] : theme.palette.grey[200],\r\n    }\r\n}));\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className={styles().footer}>\r\n            <Container maxWidth=\"sm\">\r\n                <Typography variant=\"body1\">This is my first React application!</Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {'Copyright © '}\r\n                    <Link target=\"_blank\" rel=\"noopener\" color=\"inherit\" href=\"https://www.linkedin.com/in/d-nevolin/\">\r\n                        Dmitriy Nevolin\r\n                    </Link>{' '}\r\n                    {new Date().getFullYear()}\r\n                    {'.'}\r\n                </Typography>\r\n            </Container>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default Footer","export const replay = () => ({ type: 'REPLAY_GAME' });\r\nexport const restart = () => ({ type: 'RESTART_GAME' });","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport AppIcon from \"@material-ui/icons/Apps\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {connect} from \"react-redux\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport * as actions from \"../actions/header\";\r\n\r\nconst styles = makeStyles(theme => ({\r\n    icon: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(1),\r\n        paddingRight: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nconst Header = (props) => {\r\n    const classes = styles();\r\n    return (\r\n        <>\r\n            <AppBar position=\"relative\">\r\n                <Toolbar>\r\n                    <AppIcon className={classes.icon} />\r\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Tic Tac Toe\r\n                    </Typography>\r\n                    {!props.boardIsEmpty &&\r\n                        <Fab key=\"replay\" variant=\"extended\" color=\"secondary\" size=\"small\"\r\n                             className={classes.button} onClick={props.replay}>\r\n                            <ReplayIcon/> Replay\r\n                        </Fab>\r\n                    }\r\n                    {props.startGame &&\r\n                        <Fab key=\"close\" variant=\"extended\" color=\"secondary\" size=\"small\"\r\n                             className={classes.button} onClick={props.restart}>\r\n                            <CloseIcon /> Close\r\n                        </Fab>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        boardIsEmpty: state.gameStatus.boardIsEmpty,\r\n        startGame: state.gameStatus.startGame\r\n    }\r\n), actions)(Header);","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport onlyUpdateForKeys from 'recompose/onlyUpdateForKeys';\r\n\r\nconst styles = makeStyles(theme => ({\r\n    cell: {\r\n        width: 100,\r\n        height: 100,\r\n        fontWeight: 'bold',\r\n        lineHeight: 0,\r\n        fontSize: '250%',\r\n        borderRadius: 0,\r\n        borderColor: theme.palette.grey[300],\r\n        \"&:hover\": {\r\n            borderColor: theme.palette.grey[300]\r\n        }\r\n    }\r\n}));\r\n\r\nconst Cell = (props) => {\r\n\r\n    const {mode, value, index} = props,\r\n        className = styles().cell,\r\n        colorMap = {\r\n            X: 'primary',\r\n            O: 'secondary'\r\n        };\r\n\r\n    const makeMove = (e) => {\r\n        if (mode === 'selected' || mode === 'disabled') {\r\n            e.preventDefault();\r\n        } else {\r\n            props.onMakeMove(index);\r\n        }\r\n    };\r\n\r\n    let disabled = false,\r\n        variant = 'outlined';\r\n    if (mode === 'selected') {\r\n        variant = 'contained';\r\n    } else if (mode === 'disabled') {\r\n        disabled = true;\r\n    }\r\n    return (\r\n        <GridListTile>\r\n            <Button variant={variant} color={colorMap[value] || 'default'}\r\n                    onClick={makeMove}\r\n                    disabled={disabled}\r\n                    className={className}>\r\n                {value}\r\n            </Button>\r\n        </GridListTile>\r\n    )\r\n};\r\n\r\n//IMPORTANT! onlyUpdateForKeys filters props.style from material-ui\r\nexport default onlyUpdateForKeys(['value', 'mode'])(Cell);","export const allLines = (() => {\r\n    function* range(start, end, step = 1) {\r\n        for (let i = start; i <= end; i = i + step) yield i;\r\n    }\r\n    return [\r\n        ...[0, 3, 6].map(i => [...range(i, i + 2)]),\r\n        ...[0, 1, 2].map(i => [...range(i, 8, 3)]),\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n})();","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Cell from \"./Cell\";\r\nimport {allLines} from \"../../config/index.js\";\r\n\r\nconst styles = theme => ({\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(3),\r\n        paddingBottom: theme.spacing(3),\r\n    },\r\n    grid: {\r\n        width: 300\r\n    },\r\n    title: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(1, 0, 1),\r\n    },\r\n    player: {\r\n        padding: theme.spacing(2),\r\n    }\r\n});\r\n\r\nconst calcBestTurn = (lines, matrix, currentPlayer) => {\r\n    //const centerIndex = 4;\r\n    const ranks = {};\r\n    //console.log(matrix);\r\n    // if (!matrix[centerIndex]) {\r\n    //     return centerIndex;\r\n    // }\r\n    const p1 = currentPlayer;\r\n    const p2 = currentPlayer === 'X' ? 'O' : 'X';\r\n    const rankMatrix = {\r\n        [p1 + p1]: 1000, // XXF\r\n        [p2 + p2]: 300, // OOF\r\n        [p1]: 50, //XFF\r\n        [p2]: 5, //0FF\r\n        \"\": 20, //FFF\r\n        [p2 + p1]: 50 //X0F\r\n    };\r\n    for (const line of lines) {\r\n        const emptyCells = [],\r\n            values = [];\r\n        for (const i of line) {\r\n            let value = matrix[i];\r\n            values.push(value);\r\n            if (!value) emptyCells.push(i);\r\n        }\r\n        if (!emptyCells.length) continue;\r\n        const hash = values.sort().join('');\r\n        const rank = rankMatrix[hash] || 0;\r\n        //console.log(p1, hash, rank, emptyCells, line);\r\n        for (const i of emptyCells) {\r\n            ranks[i] = (ranks[i] || 0) + rank;\r\n        }\r\n    }\r\n    const sortedRanks = Object.entries(ranks).sort((a, b) => b[1] - a[1]);\r\n    //console.log('sortedRanks',sortedRanks);\r\n    return sortedRanks[0][0];\r\n};\r\n\r\nconst aiTurn = (props) => {\r\n    const AiTurn = calcBestTurn(allLines, props.matrix, props.nextPlayer);\r\n    props.onMakeMove(AiTurn);\r\n};\r\n\r\nclass Board extends Component {\r\n\r\n    getValue = (index) => {\r\n        return this.props.matrix[index] || '';\r\n    };\r\n\r\n    onMakeMove = (index) => {\r\n        this.props.onMakeMove(index);\r\n    };\r\n\r\n    shouldComponentUpdate = (nextProps) => {\r\n        const props = nextProps;\r\n        if (props.gameMode === 'SINGLE' && props.nextPlayer !== props.playerSymbol && !props.gameOver) {\r\n            aiTurn(props);\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {nextPlayer, playerSymbol} = this.props;\r\n        if (nextPlayer !== playerSymbol) {\r\n            aiTurn(this.props);\r\n        }\r\n    };\r\n\r\n    getGameInfo = () => {\r\n        const {gameMode, playerSymbol, gameOver, winner, nextPlayer} = this.props;\r\n        let gameOverInfo, gameOverColor = 'textPrimary', turnInfo;\r\n        if (gameOver) {\r\n            if (winner) {\r\n                if (gameMode === 'SINGLE') {\r\n                    gameOverInfo = (winner === playerSymbol ? 'You won!' : 'Computer won!')\r\n                } else {\r\n                    gameOverInfo = `Player ${winner === 'X' ? 1 : 2} wins!`;\r\n                }\r\n                gameOverColor = (winner === 'X' ? 'primary' : 'secondary');\r\n            } else {\r\n                gameOverInfo = 'Draw'\r\n            }\r\n        } else {\r\n            turnInfo = gameMode === 'SINGLE' ? 'Your turn' : `Player ${nextPlayer === 'X' ? 1 : 2} to move`;\r\n        }\r\n        return {gameOverInfo, gameOverColor, turnInfo}\r\n    };\r\n\r\n    getCellMode = (isGameOver, wonLine, index) => {\r\n        if (isGameOver) {\r\n            if (wonLine && wonLine.includes(index)) {\r\n                return 'selected';\r\n            } else {\r\n                return 'disabled';\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    render() {\r\n        const {classes, gameOver, wonLine} = this.props;\r\n        const {gameOverInfo, gameOverColor, turnInfo} = this.getGameInfo();\r\n        return (\r\n            <main>\r\n                <div className={classes.title}>\r\n                    <Container maxWidth=\"sm\">\r\n                        {gameOver\r\n                            ? <Typography component=\"h1\" variant=\"h2\" align=\"center\" color={gameOverColor}>\r\n                                {gameOverInfo}\r\n                            </Typography>\r\n                            : <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" className={classes.player}>\r\n                                {turnInfo}\r\n                            </Typography>\r\n                        }\r\n                    </Container>\r\n                </div>\r\n                <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                    <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                        <GridList cellHeight=\"auto\" cols={3} className={classes.grid}>\r\n                            {[...Array(9).keys()].map(index => (\r\n                                <Cell key={index}\r\n                                      index={index}\r\n                                      value={this.getValue(index)}\r\n                                      mode={this.getCellMode(gameOver, wonLine, index)}\r\n                                      onMakeMove={this.onMakeMove}/>\r\n                            ))}\r\n                        </GridList>\r\n                    </Grid>\r\n                </Container>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nBoard.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nconst StyledBoard = withStyles(styles)(Board);\r\nexport default connect(\r\n    state => ({\r\n        matrix: state.gameStatus.matrix,\r\n        wonLine: state.gameStatus.wonLine,\r\n        nextPlayer: state.gameStatus.nextPlayer,\r\n        gameOver: state.gameStatus.gameOver,\r\n        winner: state.gameStatus.winner,\r\n        gameMode: state.selectedMode,\r\n        playerSymbol: state.selectedPlayer\r\n    }),\r\n    ({\r\n        onMakeMove: (index) => ({type: 'MAKE_MOVE', index})\r\n    })\r\n)(StyledBoard);","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst styles = makeStyles(theme => ({\r\n    button: {\r\n        width: 100,\r\n        height: 100,\r\n        fontWeight: 'bold',\r\n        lineHeight: 0,\r\n        fontSize: '200%',\r\n        borderColor: theme.palette.grey[300],\r\n        \"&:hover\": {\r\n            borderColor: theme.palette.grey[300]\r\n        }\r\n    }\r\n}));\r\n\r\nconst SinglePlayerDialog = (props) => {\r\n    const {selectPlayer} = props;\r\n    const className = styles().button;\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                Select Player\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\">\r\n                <Grid container spacing={2} justify=\"center\" direction=\"column\">\r\n                    <Grid item>\r\n                        <Button variant=\"outlined\" color=\"primary\" className={className}\r\n                                onClick={() => selectPlayer('X')}>X</Button>\r\n                        <Button variant=\"outlined\" color=\"secondary\" className={className}\r\n                                onClick={() => selectPlayer('O')}>O</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Typography>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default SinglePlayerDialog;","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport ComputerIcon from \"@material-ui/icons/Computer\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport WifiIcon from \"@material-ui/icons/Wifi\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst styles = makeStyles(theme => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst ModeDialog = (props) => {\r\n    const onSelectSingleMode = () => {\r\n        props.selectMode('SINGLE');\r\n    };\r\n    const onSelectDoubleMode = () => {\r\n        props.selectMode('DOUBLE');\r\n    };\r\n    const onSelectOnlineMode = () => {\r\n        props.selectMode('ONLINE');\r\n    };\r\n    const classes = styles();\r\n    return (\r\n        <>\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                Select Mode\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\">\r\n                <Grid container spacing={2} justify=\"center\" direction=\"column\">\r\n                    <Grid item>\r\n                        <Fab variant=\"extended\" color=\"primary\" className={classes.margin}\r\n                             onClick={onSelectSingleMode}>\r\n                            <ComputerIcon className={classes.extendedIcon}/>\r\n                            1 Player\r\n                        </Fab>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Fab variant=\"extended\" color=\"primary\" className={classes.margin}\r\n                             onClick={onSelectDoubleMode}>\r\n                            <PeopleIcon className={classes.extendedIcon}/>\r\n                            2 Players\r\n                        </Fab>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Fab variant=\"extended\" disabled={true} color=\"primary\" className={classes.margin}\r\n                             onClick={onSelectOnlineMode}>\r\n                            <WifiIcon className={classes.extendedIcon}/>\r\n                            Play Online\r\n                        </Fab>\r\n                    </Grid>\r\n                </Grid>\r\n            </Typography>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ModeDialog","export const selectMode = (mode) => ({ type: 'SELECT_MODE', mode });\r\nexport const startGame = () => ({ type: 'START_GAME' });\r\nexport const selectPlayer = (player) => ({type: 'SELECT_PLAYER', player});","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {connect} from \"react-redux\";\r\nimport SinglePlayerDialog from \"./SinglePlayerDialog\";\r\nimport ModeDialog from \"./ModeDialog\";\r\nimport * as actions from \"../../actions/start\";\r\n\r\nconst Start = (props) => {\r\n    const {mode, isGameStarted} = props;\r\n    const selectMode = (mode) => {\r\n        props.selectMode(mode);\r\n        if (mode==='DOUBLE') {\r\n            props.startGame();\r\n        }\r\n    };\r\n    const selectPlayer = (player) => {\r\n        props.selectPlayer(player);\r\n        props.startGame();\r\n    };\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            {mode==='SINGLE' && !isGameStarted\r\n                ? <SinglePlayerDialog selectPlayer={selectPlayer}/>\r\n                : <ModeDialog selectMode={selectMode}/>\r\n            }\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        mode: state.selectedMode,\r\n        isGameStarted: state.startGame\r\n    }),\r\n    actions\r\n)(Start);","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport StartDialog from \"./StartDialog\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Center = props => {\r\n    return props.startGame ? <Board /> : <StartDialog />\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        startGame: state.gameStatus.startGame\r\n    })\r\n)(Center);","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Footer from \"./components/Footer\"\nimport Header from \"./components/Header\"\nimport Center from \"./components/Center\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n// import { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nconst styles = makeStyles({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh'\n    }\n});\n\nconst App = () => {\n    return (\n        // <BrowserRouter>\n        <>\n            <CssBaseline/>\n            <div className={styles().root}>\n                <Header/>\n                <Center/>\n                <Footer/>\n            </div>\n        </>\n        // </BrowserRouter>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from \"redux\";\r\nimport {allLines} from \"../config/index.js\";\r\n\r\nconst initialState = {\r\n    matrix: {},\r\n    nextPlayer: 'X',\r\n    gameOver: false,\r\n    winner: null,\r\n    wonLine: null,\r\n    startGame: false,\r\n    boardIsEmpty: true\r\n};\r\nconst checkWin = (state) => {\r\n    for (const line of allLines) {\r\n        let prevValue, currentValue;\r\n        for (const index of line) {\r\n            currentValue = state.matrix[index];\r\n            if (!currentValue || (prevValue && currentValue !== prevValue)) {\r\n                prevValue = null;\r\n                break;\r\n            }\r\n            prevValue = currentValue;\r\n        }\r\n        if (prevValue) {\r\n            state.winner = prevValue;\r\n            state.wonLine = line;\r\n            break;\r\n        }\r\n    }\r\n    if (state.winner || Object.keys(state.matrix).length >= 9) {\r\n        state.gameOver = true;\r\n    }\r\n};\r\nconst gameStatus = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'MAKE_MOVE':\r\n            state = {\r\n                ...state,\r\n                nextPlayer: state.nextPlayer === 'X' ? 'O' : 'X',\r\n                matrix: {...state.matrix, [action.index]: state.nextPlayer}\r\n            };\r\n            checkWin(state);\r\n            break;\r\n        case 'START_GAME':\r\n            state = {\r\n                ...state,\r\n                startGame: true\r\n            };\r\n            break;\r\n        case 'REPLAY_GAME':\r\n            state = {\r\n                ...initialState,\r\n                startGame: true\r\n            };\r\n            break;\r\n        case 'RESTART_GAME':\r\n            state = initialState;\r\n            break;\r\n        default:\r\n    }\r\n    state.boardIsEmpty = !Object.keys(state.matrix).length;\r\n    return state;\r\n};\r\n\r\nconst selectedMode = (state = null, action) => {\r\n    if (action.type === 'SELECT_MODE') {\r\n        state = action.mode;\r\n    } else if (action.type === 'RESTART_GAME') {\r\n        state = null;\r\n    }\r\n    return state;\r\n};\r\n\r\nconst selectedPlayer = (state = 'X', action) => {\r\n    if (action.type === 'SELECT_PLAYER') {\r\n        state = action.player === 'X' ? 'X' : 'O';\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default combineReducers({\r\n    gameStatus,\r\n    selectedMode,\r\n    selectedPlayer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './redusers';\nconst store = createStore(reducers);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}