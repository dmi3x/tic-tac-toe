{"version":3,"sources":["components/Footer.js","actions/header.js","components/Header.js","components/Board/Cell.js","components/Board/index.js","actions/start.js","components/Start/index.js","components/Center.js","App.js","serviceWorker.js","redusers/index.js","index.js"],"names":["styles","makeStyles","theme","footer","padding","spacing","marginTop","textAlign","backgroundColor","palette","type","grey","Footer","className","Container","maxWidth","Typography","variant","color","Link","target","rel","href","Date","getFullYear","replay","restart","icon","marginRight","title","flexGrow","button","marginLeft","paddingRight","connect","state","boardIsEmpty","gameStatus","startGame","actions","props","classes","AppBar","position","Toolbar","noWrap","Fab","key","size","onClick","cell","width","height","fontWeight","lineHeight","fontSize","borderRadius","borderColor","fixedCell","onlyUpdateForKeys","value","disabled","gameOver","wonLine","includes","index","GridListTile","Button","X","O","e","preventDefault","onMakeMove","cardGrid","paddingTop","paddingBottom","grid","background","paper","player","matrix","nextPlayer","winner","component","align","Grid","container","direction","alignItems","justify","GridList","cellHeight","cols","Array","keys","map","selectMode","mode","margin","extendedIcon","gutterBottom","item","root","display","flexDirection","minHeight","App","CssBaseline","Boolean","window","location","hostname","match","initialState","winLines","range","start","end","step","i","checkWin","line","prevValue","currentValue","Object","length","combineReducers","action","store","createStore","reducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47bc4b73.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst styles = makeStyles(theme => ({\r\n    footer: {\r\n        padding: theme.spacing(3, 2),\r\n        marginTop: 'auto',\r\n        textAlign: 'center',\r\n        backgroundColor: theme.palette.type === 'dark' ? theme.palette.grey[800] : theme.palette.grey[200],\r\n    }\r\n}));\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className={styles().footer}>\r\n            <Container maxWidth=\"sm\">\r\n                <Typography variant=\"body1\">This is my first React application!</Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {'Copyright Â© '}\r\n                    <Link target=\"_blank\" rel=\"noopener\" color=\"inherit\" href=\"https://www.linkedin.com/in/d-nevolin/\">\r\n                        Dmitriy Nevolin\r\n                    </Link>{' '}\r\n                    {new Date().getFullYear()}\r\n                    {'.'}\r\n                </Typography>\r\n            </Container>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default Footer","export const replay = () => ({ type: 'REPLAY_GAME' });\r\nexport const restart = () => ({ type: 'RESTART_GAME' });","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport AppIcon from \"@material-ui/icons/Apps\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {connect} from \"react-redux\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport * as actions from \"../actions/header\";\r\n\r\nconst styles = makeStyles(theme => ({\r\n    icon: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(1),\r\n        paddingRight: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nconst Header = (props) => {\r\n    const classes = styles();\r\n    return (\r\n        <>\r\n            <AppBar position=\"relative\">\r\n                <Toolbar>\r\n                    <AppIcon className={classes.icon} />\r\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Tic Tac Toe\r\n                    </Typography>\r\n                    {!props.boardIsEmpty &&\r\n                        <Fab key=\"replay\" variant=\"extended\" color=\"secondary\" size=\"small\"\r\n                             className={classes.button} onClick={props.replay}>\r\n                            <ReplayIcon/> Replay\r\n                        </Fab>\r\n                    }\r\n                    {props.startGame &&\r\n                        <Fab key=\"close\" variant=\"extended\" color=\"secondary\" size=\"small\"\r\n                             className={classes.button} onClick={props.restart}>\r\n                            <CloseIcon /> Close\r\n                        </Fab>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        boardIsEmpty: state.gameStatus.boardIsEmpty,\r\n        startGame: state.gameStatus.startGame\r\n    }\r\n), actions)(Header);","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {connect} from \"react-redux\";\r\nimport onlyUpdateForKeys from 'recompose/onlyUpdateForKeys';\r\n\r\nconst styles = makeStyles(theme => ({\r\n    cell: {\r\n        width: 100,\r\n        height: 100,\r\n        fontWeight: 'bold',\r\n        lineHeight: 0,\r\n        fontSize: '250%',\r\n        borderRadius: 0,\r\n        borderColor: theme.palette.grey[300],\r\n        \"&:hover\": {\r\n            borderColor: theme.palette.grey[300]\r\n        }\r\n    }\r\n}));\r\n\r\nconst Cell = (props) => {\r\n\r\n    const makeMove = (e) => {\r\n        if (props.gameOver) {\r\n            e.preventDefault();\r\n        } else if (props.value) {\r\n            e.preventDefault();\r\n        } else {\r\n            props.onMakeMove(props.index);\r\n        }\r\n    };\r\n\r\n    const className = styles().cell;\r\n    const value = props.value;\r\n    const colorMap = {\r\n        X: 'primary',\r\n        O: 'secondary'\r\n    };\r\n    let disabled = false;\r\n    let variant = 'outlined';\r\n    if (props.gameOver) {\r\n        if (props.wonLine && props.wonLine.includes(props.index)) {\r\n            variant = 'contained';\r\n        } else {\r\n            disabled = true;\r\n        }\r\n    }\r\n    return (\r\n        <GridListTile>\r\n            <Button variant={variant} color={colorMap[value] || 'default'}\r\n                    onClick={makeMove}\r\n                    disabled={disabled}\r\n                    className={className}>\r\n                {value}\r\n            </Button>\r\n        </GridListTile>\r\n    )\r\n};\r\n\r\n//filter props.style from material-ui\r\nconst fixedCell = onlyUpdateForKeys(['value','gameOver'])(Cell);\r\nexport default connect(null, ({\r\n    onMakeMove: (index) => ({ type: 'MAKE_MOVE', index })\r\n}))(fixedCell);","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Cell from \"./Cell\";\r\n\r\nconst styles = makeStyles(theme => ({\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(3),\r\n        paddingBottom: theme.spacing(3),\r\n    },\r\n    grid: {\r\n        width: 300\r\n    },\r\n    title: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(1, 0, 1),\r\n    },\r\n    player: {\r\n        padding: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nconst Board = (props) => {\r\n\r\n    const getValue = (index) => {\r\n        return props.matrix[index] || '';\r\n    };\r\n    const classes = styles();\r\n    const winner = props.winner;\r\n\r\n    return (\r\n        <main>\r\n            <div className={classes.title}>\r\n                <Container maxWidth=\"sm\">\r\n                    {props.gameOver\r\n                        ? <Typography component=\"h1\" variant=\"h2\" align=\"center\"\r\n                            color={winner ? (winner === 'X' ? 'primary' : 'secondary') : 'textPrimary'}>\r\n                            {winner ? `Player ${winner === 'X' ? 1 : 2} wins!` : 'Draw!'}\r\n                          </Typography>\r\n                        : <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" className={classes.player}>\r\n                            Player {props.nextPlayer==='X' ? 1 : 2} to move\r\n                          </Typography>\r\n                    }\r\n                </Container>\r\n            </div>\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\">\r\n                    <GridList cellHeight=\"auto\" cols={3} className={classes.grid}>\r\n                        {[...Array(9).keys()].map(cell => (\r\n                            <Cell key={cell}\r\n                                  index={cell}\r\n                                  wonLine={props.wonLine}\r\n                                  gameOver={props.gameOver}\r\n                                  value={getValue(cell)} />\r\n                        ))}\r\n                    </GridList>\r\n                </Grid>\r\n            </Container>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        matrix: state.gameStatus.matrix,\r\n        wonLine: state.gameStatus.wonLine,\r\n        nextPlayer: state.gameStatus.nextPlayer,\r\n        gameOver: state.gameStatus.gameOver,\r\n        winner: state.gameStatus.winner\r\n    })\r\n)(Board);","export const selectMode = (mode) => ({ type: 'SELECT_MODE', mode });\r\nexport const startGame = () => ({ type: 'START_GAME' });","import React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Fab from '@material-ui/core/Fab';\r\nimport ComputerIcon from \"@material-ui/icons/Computer\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport WifiIcon from \"@material-ui/icons/Wifi\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {connect} from \"react-redux\";\r\nimport * as actions from \"../../actions/start\";\r\n\r\nconst styles = makeStyles(theme => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst Start = (props) => {\r\n    const onSelectSingleMode = () => {\r\n        props.selectMode('SINGLE');\r\n        props.startGame();\r\n    };\r\n    const onSelectDoubleMode = () => {\r\n        props.selectMode('DOUBLE');\r\n        props.startGame();\r\n    };\r\n    const onSelectOnlineMode = () => {\r\n        props.selectMode('ONLINE');\r\n        props.startGame();\r\n    };\r\n\r\n    const classes = styles();\r\n    return (\r\n        <Container maxWidth=\"sm\">\r\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                Select Mode\r\n            </Typography>\r\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\">\r\n                <Grid container spacing={2} justify=\"center\" direction=\"column\">\r\n                    <Grid item>\r\n                        <Fab variant=\"extended\" disabled={true} color=\"primary\" className={classes.margin}\r\n                             onClick={onSelectSingleMode}>\r\n                            <ComputerIcon className={classes.extendedIcon} />\r\n                            1 Player\r\n                        </Fab>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Fab variant=\"extended\" color=\"primary\" className={classes.margin}\r\n                             onClick={onSelectDoubleMode}>\r\n                            <PeopleIcon className={classes.extendedIcon} />\r\n                            2 Players\r\n                        </Fab>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Fab variant=\"extended\" disabled={true} color=\"primary\" className={classes.margin}\r\n                             onClick={onSelectOnlineMode}>\r\n                            <WifiIcon className={classes.extendedIcon} />\r\n                            Play Online\r\n                        </Fab>\r\n                    </Grid>\r\n                </Grid>\r\n            </Typography>\r\n        </Container>\r\n    )\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        mode: state.mode\r\n    }),\r\n    actions\r\n)(Start);","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport Start from \"./Start\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Center = props => {\r\n    return props.startGame ? <Board /> : <Start />\r\n};\r\n\r\nexport default connect(\r\n    state => ({\r\n        startGame: state.gameStatus.startGame\r\n    })\r\n)(Center);","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Footer from \"./components/Footer\"\nimport Header from \"./components/Header\"\nimport Center from \"./components/Center\"\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n// import { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nconst styles = makeStyles({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        minHeight: '100vh'\n    }\n});\n\nconst App = () => {\n    return (\n        // <BrowserRouter>\n        <>\n            <CssBaseline/>\n            <div className={styles().root}>\n                <Header/>\n                <Center/>\n                <Footer/>\n            </div>\n        </>\n        // </BrowserRouter>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from \"redux\";\r\n\r\nconst initialState = {\r\n    matrix: {},\r\n    nextPlayer: 'X',\r\n    gameOver: false,\r\n    winner: null,\r\n    wonLine: null,\r\n    startGame: false,\r\n    boardIsEmpty: true\r\n};\r\nconst winLines = (() => {\r\n    function* range(start, end, step = 1) {\r\n        for (let i = start; i <= end; i = i + step) yield i;\r\n    }\r\n    return [\r\n        ...[0, 3, 6].map(i => [...range(i, i + 2)]),\r\n        ...[0, 1, 2].map(i => [...range(i, 8, 3)]),\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n})();\r\nconst checkWin = (state) => {\r\n    for (const line of winLines) {\r\n        let prevValue, currentValue;\r\n        for (const index of line) {\r\n            currentValue = state.matrix[index];\r\n            if (!currentValue || (prevValue && currentValue !== prevValue)) {\r\n                prevValue = null;\r\n                break;\r\n            }\r\n            prevValue = currentValue;\r\n        }\r\n        if (prevValue) {\r\n            state.winner = prevValue;\r\n            state.wonLine = line;\r\n            break;\r\n        }\r\n    }\r\n    if (state.winner || Object.keys(state.matrix).length >= 9) {\r\n        state.gameOver = true;\r\n    }\r\n};\r\nconst gameStatus = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'MAKE_MOVE':\r\n            state = {\r\n                ...state,\r\n                nextPlayer: state.nextPlayer === 'X' ? 'O' : 'X',\r\n                matrix: {...state.matrix, [action.index]: state.nextPlayer}\r\n            };\r\n            checkWin(state);\r\n            break;\r\n        case 'START_GAME':\r\n            state = {\r\n                ...state,\r\n                startGame: true\r\n            };\r\n            break;\r\n        case 'REPLAY_GAME':\r\n            state = {\r\n                ...initialState,\r\n                startGame: true\r\n            };\r\n            break;\r\n        case 'RESTART_GAME':\r\n            state = initialState;\r\n            break;\r\n        default:\r\n    }\r\n    state.boardIsEmpty = !Object.keys(state.matrix).length;\r\n    return state;\r\n};\r\n\r\nconst selectMode = (state = null, action) => {\r\n    if (action.type === 'SELECT_MODE') {\r\n        state = action.mode;\r\n    } else if (action.type === 'RESTART_GAME') {\r\n        state = null;\r\n    }\r\n    return state;\r\n};\r\n\r\nexport default combineReducers({\r\n    gameStatus,\r\n    selectMode\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './redusers';\nconst store = createStore(reducers);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}